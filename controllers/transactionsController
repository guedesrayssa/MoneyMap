const pool = require('../config/database');  // conexão com o banco de dados

const getAllTransactions = async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM transactions');
    res.status(200).json(result.rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


const getTransactionById = async (req, res) => {
  try {
    const { id } = req.params;
    const result = await pool.query('SELECT * FROM transactions WHERE id = $1', [id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Transação não encontrada' });
    }
    res.status(200).json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const createTransaction = async (req, res) => {
  const { user_id, category_id, title, amount, date, description } = req.body;
  const query = `
    INSERT INTO transactions 
    (user_id, category_id, title, amount, date, description) 
    VALUES ($1, $2, $3, $4, $5, $6) 
    RETURNING *;
  `;
  try {
    // Validação básica
    if (!user_id || !title || !amount || !date) {
      return res.status(400).json({ error: "Campos obrigatórios não preenchidos." });
    }
    const result = await pool.query(query, [user_id, category_id, title, amount, date, description]);
    res.status(201).json(result.rows[0]);  // Retorna a transação criada
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const updateTransaction = async (req, res) => {
  const { id } = req.params;
  const { user_id, category_id, title, amount, date, description } = req.body;
  const query = `
    UPDATE transactions SET user_id = $1, category_id = $2, title = $3, amount = $4, date = $5, description = $6
    WHERE id = $7 RETURNING *;
  `;
  try {
    const result = await pool.query(query, [user_id, category_id, title, amount, date, description, id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Transação não encontrada' });
    }
    res.status(200).json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const deleteTransaction = async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query('DELETE FROM transactions WHERE id = $1 RETURNING *', [id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Transação não encontrada' });
    }
    res.status(200).json({ message: 'Transação deletada com sucesso' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


module.exports = {
  getAllTransactions,
  getTransactionById,
  createTransaction,
  updateTransaction,
  deleteTransaction
};